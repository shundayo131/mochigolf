# project name 
service: mochi-golf 

# list of plugins 
plugins: 
  - serverless-offline 
  # - serverless-dynamodb-local

# configuration 
provider: 
  name: aws 
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}  
  region: ${opt:region, 'us-east-1'}
  httpApi:
    cors:
      allowedOrigins: ${self:custom.origins.${self:provider.stage}} # dev or prod from custom.origins 
      allowedHeaders: ['Content-Type', 'Authorization']
      allowedMethods: ['GET', 'POST', 'PUT', 'DELETE']
      allowCredentials: true
  logRetentionInDays: 14
  tracing:
    lambda: true
  tags:
    Environment: ${self:provider.stage}
    Project: ${self:service}
  memorySize: 256
  timeout: 29

  # Environment variables available to all functions
  environment:
    USER_TABLE: ${self:service}-${self:provider.stage}-users
    PRACTICE_TABLE: ${self:service}-${self:provider.stage}-practices
    
  # IAM permissions for Lambda functions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
          Resource: 
            - !GetAtt UserTable.Arn
            - !GetAtt PracticeTable.Arn

# TypeScript build configuration
custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node18'
    platform: 'node'

  origins:
    dev:
      - 'http://localhost:3000' # Allow local development
      - '*'                     # Allow Postman and other tools for testing 
    prod:
      - 'https://mochigolf.com' # Restrict to production domain

# Lambda functions 
functions:
  createPractice:
    handler: src/handlers/practice/create.handler
    events:
      - http:
          path: practice
          method: post
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"

  # hello:
  #   handler: src/handlers/test/hello.handler
  #   events:
  #     - http:
  #         path: test/hello
  #         method: get
  #         cors: true

# resources - DynamoDB tables 
resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: usernameIndex
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    PracticeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRACTICE_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: practiceId
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: practiceId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: dateIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true